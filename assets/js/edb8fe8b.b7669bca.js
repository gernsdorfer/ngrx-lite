"use strict";(self.webpackChunkngrx_lite=self.webpackChunkngrx_lite||[]).push([[99],{5125:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>f,toc:()=>l});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),c=["components"],i={sidebar_position:4},s="Share Action events for ngrx",f={unversionedId:"store-strategies/combine-with-ngrx-effects",id:"store-strategies/combine-with-ngrx-effects",title:"Share Action events for ngrx",description:"Demo",source:"@site/docs/store-strategies/combine-with-ngrx-effects.md",sourceDirName:"store-strategies",slug:"/store-strategies/combine-with-ngrx-effects",permalink:"/ngrx-lite/docs/store-strategies/combine-with-ngrx-effects",editUrl:"https://github.com/gernsdorfer/ngrx-lite/edit/master/apps/doc-app/docs/store-strategies/combine-with-ngrx-effects.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Global Store",permalink:"/ngrx-lite/docs/store-strategies/global-store"},next:{title:"Store Devtools",permalink:"/ngrx-lite/docs/dev-tools"}},l=[{value:"Share PATCH/SET Action&#39;s",id:"share-patchset-actions",children:[{value:"Listen in Global Effect",id:"listen-in-global-effect",children:[],level:3}],level:2},{value:"Share Loader Effect Action&#39;s",id:"share-loader-effect-actions",children:[{value:"Listen in Global Effect",id:"listen-in-global-effect-1",children:[],level:3}],level:2}],p={toc:l};function m(e){var t=e.components,n=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"share-action-events-for-ngrx"},"Share Action events for ngrx"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://gernsdorfer.github.io/ngrx-lite/sample-app/#/share-actions"},"Demo")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/gernsdorfer/ngrx-lite/tree/master/apps/sample-app/src/app/component-store/share-actions"},"Demo-Code")),(0,a.kt)("p",null,"Create a ",(0,a.kt)("a",{parentName:"p",href:"https://ngrx.io/guide/store/actions"},"ngrx Action")," to share your State Change Event."),(0,a.kt)("h2",{id:"share-patchset-actions"},"Share PATCH/SET Action's"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="my-counter.component.ts"',title:'"my-counter.component.ts"'},"import {Component} from '@angular/core';\nimport {EffectStates, getCustomAction, LoadingStoreState,} from '@gernsdorfer/ngrx-lite';\n\nconst storeName = 'COUNTER';\nconst actionName = 'INCREMENT';\n\ninterface MyState {\n    myValue: string;\n}\n// Get Success Action for increment Effect\nexport const MyIncrementAction = getCustomAction<{ counter: number }>({\n  storeName: storeName,\n  actionName: actionName,\n});\n\n@Component({\n  \n})\nexport class CounterComponent {\n  private store = this.storeFactory.createComponentStore<MyState>({\n    storeName: 'BASIC_COUNTER',\n    defaultState: {counter: 0},\n  });\n\n  increment() {\n    this.store.patchState(\n      ({ counter }) => ({ counter: counter + 1 }),\n      actionName\n    );\n  }\n}\n")),(0,a.kt)("h3",{id:"listen-in-global-effect"},"Listen in Global Effect"),(0,a.kt)("p",null,"Listen in ",(0,a.kt)("a",{parentName:"p",href:"https://ngrx.io/guide/store/actions"},"@ngrx/Effects")," for Counter Success Action"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="my-effect.effect.ts"',title:'"my-effect.effect.ts"'},'import {Actions, createLoadingEffect, ofType,} from "@ngrx/effects";\nimport {MyIncrementAction} from "./my-counter.component.ts";\n\n@Injectable()\nexport class DemoEffect {\n  constructor(private actions$: Actions) {\n  }\n\n  logActions$ = createLoadingEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(MyIncrementAction),\n        tap((data) => console.log(data))\n      ),\n    {dispatch: false}\n  );\n}\n')),(0,a.kt)("h2",{id:"share-loader-effect-actions"},"Share Loader Effect Action's"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="my-counter.component.ts"',title:'"my-counter.component.ts"'},"import {Component} from '@angular/core';\nimport {EffectStates, getEffectAction, LoadingStoreState,} from '@gernsdorfer/ngrx-lite';\n\nconst storeName = 'counter';\nconst incrementEffectName = 'increment'\n\ntype State = LoadingStoreState<{ counter: number }, { message: string }>;\n\n// Get Success Action (Load/Success/Error) for increment Effect\nexport const MyIncrementSuccessAction = getCustomAction<LoadingStoreState<number, never>>({\n  storeName: storeName,\n  effectName: incrementEffectName,\n  type: EffectStates.SUCCESS,\n});\n\n@Component({\n})\nexport class CounterComponent {\n  private store = this.storeFactory.createComponentLoadingStore<State['item'],\n    State['error']>({\n    storeName: 'LOADING_STORE',\n  });\n\n  incrementEffect = this.counterStore.createLoadingEffect(incrementEffectName,\n    (counter: number) => of(counter + 1)\n  );\n}\n")),(0,a.kt)("h3",{id:"listen-in-global-effect-1"},"Listen in Global Effect"),(0,a.kt)("p",null,"Listen in ",(0,a.kt)("a",{parentName:"p",href:"https://ngrx.io/guide/store/actions"},"@ngrx/Effects")," for Store Success Action"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="my-effect.effect.ts"',title:'"my-effect.effect.ts"'},'import {Actions, createLoadingEffect, ofType,} from "@ngrx/effects";\nimport {MyIncrementSuccessAction} from "./my-counter.component.ts";\n\n@Injectable()\nexport class DemoEffect {\n  constructor(private actions$: Actions) {\n  }\n\n  logActions$ = createLoadingEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(MyIncrementSuccessAction),\n        tap((data) => console.log(data))\n      ),\n    {dispatch: false}\n  );\n}\n')))}m.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),f=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=f(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=f(n),u=o,g=m["".concat(s,".").concat(u)]||m[u]||p[u]||a;return n?r.createElement(g,c(c({ref:t},l),{},{components:n})):r.createElement(g,c({ref:t},l))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var f=2;f<a;f++)c[f]=n[f];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);