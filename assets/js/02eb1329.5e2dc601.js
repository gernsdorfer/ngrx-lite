"use strict";(self.webpackChunkdoc_app=self.webpackChunkdoc_app||[]).push([[395],{45:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=o(1085),r=o(1184);const s={sidebar_position:3},a="Functional Store",i={id:"store-strategies/functional-store",title:"Functional Store",description:"Demo",source:"@site/docs/store-strategies/functional-store.md",sourceDirName:"store-strategies",slug:"/store-strategies/functional-store",permalink:"/ngrx-lite/docs/store-strategies/functional-store",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/store-strategies/functional-store.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Multiple Store instances",permalink:"/ngrx-lite/docs/store-strategies/multiple-store-instances"},next:{title:"Global Store",permalink:"/ngrx-lite/docs/store-strategies/global-store"}},c={},l=[{value:"Root Stores",id:"root-stores",level:2},{value:"Define the Store as Root",id:"define-the-store-as-root",level:3},{value:"Consume your Root Store in your Component",id:"consume-your-root-store-in-your-component",level:3},{value:"Lazy Stores",id:"lazy-stores",level:2},{value:"Define the Store as Root",id:"define-the-store-as-root-1",level:3},{value:"Consume your Root Store in your Component",id:"consume-your-root-store-in-your-component-1",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"functional-store",children:"Functional Store"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://gernsdorfer.github.io/ngrx-lite/sample-app/#/functional-store",children:"Demo"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://github.com/gernsdorfer/ngrx-lite/tree/master/apps/sample-app/src/app/component-store/functional-store",children:"Demo-Code"})}),"\n",(0,n.jsx)(t.p,{children:"Store can now create as a function and can be used as a root store or as a lazy store."}),"\n",(0,n.jsx)(t.h2,{id:"root-stores",children:"Root Stores"}),"\n",(0,n.jsx)(t.p,{children:"Root Stores are created once and live as long as the application lives.\nSo you can create a store for a component and use it in every other component."}),"\n",(0,n.jsx)(t.h3,{id:"define-the-store-as-root",children:"Define the Store as Root"}),"\n",(0,n.jsxs)(t.p,{children:["Define your Service providedIn in ",(0,n.jsx)(t.code,{children:"root"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",metastring:'title="my-component-store.service.ts"',children:"export interface MyState {\n  counter: number;\n}\nconst providedIn = 'root';\n\n@Injectable({ providedIn })\nclass RootStore implements OnDestroy {\n  private storeFactory = inject(StoreFactory);\n  private store = this.storeFactory.createComponentStore<MyState>({\n    storeName: 'BASIC_COUNTER',\n    defaultState: { counter: 0 },\n  });\n  public state$ = this.store.state$;\n}\nexport const rootStore = createStoreAsFn(RootStore, {\n  providedIn: providedIn,\n});\n"})}),"\n",(0,n.jsx)(t.h3,{id:"consume-your-root-store-in-your-component",children:"Consume your Root Store in your Component"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",metastring:'title="my-component.component.ts"',children:"import { Component, OnDestroy } from '@angular/core';\nimport { rootStore } from './my-store.service';\n\n@Component()\nexport class CounterComponent {\n  private rootStore = rootStore.inject();\n  public state$ = this.rootStore.counterState$;\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"lazy-stores",children:"Lazy Stores"}),"\n",(0,n.jsxs)(t.p,{children:["Lazy Stores are created on demand and are destroyed when not used anymore.\nSo you can create a store for a component and destroy it when the component is destroyed.\nIt's necassary to implement the ",(0,n.jsx)(t.code,{children:"OnDestroy"})," interface to destroy the store."]}),"\n",(0,n.jsx)(t.h3,{id:"define-the-store-as-root-1",children:"Define the Store as Root"}),"\n",(0,n.jsxs)(t.p,{children:["Define your Lazy Service providedIn in ",(0,n.jsx)(t.code,{children:"root"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",metastring:'title="my-component-store.service.ts"',children:"export interface MyState {\n  counter: number;\n}\ntype MyDynamicStoreNames = 'StoreA' | 'StoreB';\n\nconst providedIn = null;\n\n@Injectable({ providedIn })\nclass LazyStore extends DynamicStore<MyDynamicStoreNames> implements OnDestroy {\n  private storeFactory = inject(StoreFactory);\n  private store = this.storeFactory.createComponentStore<MyState>({\n    storeName: 'BASIC_COUNTER',\n    defaultState: { counter: 0 },\n  });\n  public state$ = this.store.state$;\n\n  ngOnDestroy() {\n    this.store.ngOnDestroy();\n  }\n}\nexport const lazyStore = createStoreAsFn(LazyStore, {\n  providedIn: providedIn,\n});\n"})}),"\n",(0,n.jsx)(t.h3,{id:"consume-your-root-store-in-your-component-1",children:"Consume your Root Store in your Component"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",metastring:'title="my-component.component.ts"',children:"import { Component, OnDestroy } from '@angular/core';\nimport { lazyStore } from './my-store.service';\n\n@Component()\nexport class CounterComponent {\n  private rootStore = lazyStore.inject();\n  public state$ = this.rootStore.state$;\n}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1184:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>i});var n=o(4041);const r={},s=n.createContext(r);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);